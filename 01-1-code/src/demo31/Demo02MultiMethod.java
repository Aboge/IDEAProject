package demo31;
/*
* 在多态的代码当中，成员方法的访问规则是：
*   看new的是谁，就优先使用谁，没有则向上找。
*
* 口诀：编译看左边，运行看右边
*
* 对比一下：
* 成员方法：编译看左边，运行看右边
*   （左边有的方法，编译才会通过，如果使用的方法为子类独有，则变异无法通过，【覆盖重写的情况下】优先运行右边类中的方法）
* 成员变量：编译看左边，运行还看左边
*   （直接访问类的成员变量，左边有才会编译通过，且只访问左边的变量内容，没有向上找）
* */
public class Demo02MultiMethod {
    public static void main(String[] args) {
        Fu obj = new Zi();//多态

        obj.method();//父子都有，优先用子
        obj.methodFu();//父类独有，使用父类

        //编译看左，左边是Fu，Fu中没有methodZi方法，所以报错。
//        obj.methodZi();//错误


    }
}
