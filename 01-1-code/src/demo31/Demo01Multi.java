package demo31;
/*
* 面向对象的三大特征，封装性，继承性，多态性
* extend继承或者
* implements实现，是多态实现的前提
* 对象的多态性：
* 一个对象既有自己的形态，又继承来父类的形态，对象具有多态性。
*
* 代码中体现多态性：其实就是一句话，父类引用指向子类对象。
* 格式：
* 父类名称 对象名 = new 子类名称（）；
* 或者：
* 接口名称 对象名 = new 实现类名称（）；
*
* 访问成员变量的两种方式：
* 1。直接通过对象名称访问成员变量：看等号左边是谁，就优先用谁，没有则向上找
* 2。间接通过成员方法来访问：看该方法属于谁，优先用谁，没有则向上找
* */
public class Demo01Multi {
    public static void main(String[] args) {
        //使用多态的写法
        //左侧父类的引用，指向来右侧子类的对象
        //继承关系中，new的是谁，就优先运行谁当中的方法，没有就往上父类寻找
        Fu obj = new Zi();

        Fu obj1 = new Fu();

        obj.method();//这是子类的方法！对父类的方法进行来覆盖重写，故以以子类的方法为主
        obj.methodFu();//这是父类的特有方法

        obj1.method();//父类的对象，则以父类的方法为主，对象无法使用子类的方法

        System.out.println("==================");

        //使用多态的写法，父类引用指向子类对象
        //左边是谁，就优先用谁，没有则向上找，不会向下查找
        System.out.println(obj.num);//20,是父类的变量
        //System.out.println(obj.age);//错误写法，不会向下查找

        //通过成员方法访问，看该方法属于谁，优先用谁，没有则向上找
        //子类如果没有覆盖重写，方法属于父类的特有方法，子类覆盖重写后优先使用子类的
        obj.showNum();//20，方法属于父类
    }
}
